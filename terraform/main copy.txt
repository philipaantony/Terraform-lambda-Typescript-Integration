provider "aws" {
  region = "us-east-1"
}

# Compile TypeScript files and install dependencies
resource "null_resource" "lambda_dependencies" {
  triggers = {
    always_run = timestamp()
  }

  provisioner "local-exec" {
    command = <<EOT
      npm install
      npx tsc
    working_dir = path.module
    EOT
  }
}

# Combine dist and node_modules into a temp directory for zipping
resource "null_resource" "prepare_lambda_package" {
  depends_on = [null_resource.lambda_dependencies]
  triggers = {
    always_run = timestamp()
  }

  provisioner "local-exec" {
    command     = <<EOT
      Set-Location -Path ..
      npm install
      npx tsc
      Remove-Item -Recurse -Force package
      New-Item -Path package -ItemType Directory
      Copy-Item -Recurse -Force dist/ package/
      Copy-Item -Recurse -Force node_modules package/
    EOT
    working_dir = path.module
    interpreter = ["PowerShell", "-Command"]
  }
}

# S3 bucket read/write policy for Lambda
resource "aws_iam_policy" "s3_rw_policy" {
  name        = "LambdaS3ReadWritePolicy"
  description = "Policy for Lambda to read from and write to S3 bucket"
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect = "Allow",
        Action = [
          "s3:GetObject",
          "s3:PutObject",
          "s3:DeleteObject"
        ],
        Resource = [
          "arn:aws:s3:::s3-bucket-created-by-terraform1/*"
        ]
      },
      {
        Effect = "Allow",
        Action = [
          "s3:ListBucket"
        ],
        Resource = [
          "arn:aws:s3:::s3-bucket-created-by-terraform1"
        ]
      }
    ]
  })
}

# Attach the S3 read/write policy to the Lambda execution role
resource "aws_iam_role_policy_attachment" "lambda_s3_rw_policy_attachment" {
  role       = aws_iam_role.lambda_exec_role.name
  policy_arn = aws_iam_policy.s3_rw_policy.arn
}

# S3 bucket
resource "aws_s3_bucket" "my_public_bucket" {
  bucket = "s3-bucket-created-by-terraform1"
}

# IAM role for Lambda execution
resource "aws_iam_role" "lambda_exec_role" {
  name = "lambda_exec_role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect    = "Allow",
      Principal = { Service = "lambda.amazonaws.com" },
      Action    = "sts:AssumeRole"
    }]
  })
}

# IAM policy attachment for Lambda execution role
resource "aws_iam_role_policy_attachment" "lambda_execution_policy" {
  role       = aws_iam_role.lambda_exec_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
}

# Zip the combined package directory
data "archive_file" "lambda_zip" {
  depends_on  = [null_resource.prepare_lambda_package]
  type        = "zip"
  source_dir  = "${path.module}/../package"
  output_path = "${path.module}/../lambda.zip"
}

# Lambda function definition
resource "aws_lambda_function" "todo_lambda" {
  depends_on = [
    data.archive_file.lambda_zip
  ]

  function_name = "todo_lambda_function"
  handler       = "dist/controller/todocontroller.handler"
  runtime       = "nodejs20.x"
  role          = aws_iam_role.lambda_exec_role.arn
  timeout       = 30
  filename      = data.archive_file.lambda_zip.output_path

  environment {
    variables = {
      ENV_VAR_NAME = "value"
    }
  }
}

# API Gateway setup
resource "aws_api_gateway_rest_api" "lambda_api" {
  name        = "LambdaAPI"
  description = "API Gateway for Lambda function"
}

resource "aws_api_gateway_resource" "lambda_resource" {
  parent_id   = aws_api_gateway_rest_api.lambda_api.root_resource_id
  path_part   = "todo"
  rest_api_id = aws_api_gateway_rest_api.lambda_api.id
}

resource "aws_api_gateway_resource" "lambda_resource_id" {
  parent_id   = aws_api_gateway_resource.lambda_resource.id
  path_part   = "{id}"
  rest_api_id = aws_api_gateway_rest_api.lambda_api.id
}

# GET Method
resource "aws_api_gateway_method" "lambda_method_get" {
  rest_api_id   = aws_api_gateway_rest_api.lambda_api.id
  resource_id   = aws_api_gateway_resource.lambda_resource.id
  http_method   = "GET"
  authorization = "NONE"
}

# POST Method
resource "aws_api_gateway_method" "lambda_method_post" {
  rest_api_id   = aws_api_gateway_rest_api.lambda_api.id
  resource_id   = aws_api_gateway_resource.lambda_resource.id
  http_method   = "POST"
  authorization = "NONE"
}

# DELETE Method
resource "aws_api_gateway_method" "lambda_method_delete" {
  rest_api_id   = aws_api_gateway_rest_api.lambda_api.id
  resource_id   = aws_api_gateway_resource.lambda_resource_id.id
  http_method   = "DELETE"
  authorization = "NONE"

  request_parameters = {
    "method.request.path.id" = true
  }
}

# PATCH Method
resource "aws_api_gateway_method" "lambda_method_patch" {
  rest_api_id   = aws_api_gateway_rest_api.lambda_api.id
  resource_id   = aws_api_gateway_resource.lambda_resource_id.id
  http_method   = "PATCH"
  authorization = "NONE"

  request_parameters = {
    "method.request.path.id" = true
  }
}

# API Gateway integration for GET
resource "aws_api_gateway_integration" "lambda_integration_get" {
  rest_api_id             = aws_api_gateway_rest_api.lambda_api.id
  resource_id             = aws_api_gateway_resource.lambda_resource.id
  http_method             = aws_api_gateway_method.lambda_method_get.http_method
  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.todo_lambda.invoke_arn
}

# API Gateway integration for POST
resource "aws_api_gateway_integration" "lambda_integration_post" {
  rest_api_id             = aws_api_gateway_rest_api.lambda_api.id
  resource_id             = aws_api_gateway_resource.lambda_resource.id
  http_method             = aws_api_gateway_method.lambda_method_post.http_method
  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.todo_lambda.invoke_arn
}

# API Gateway integration for DELETE
resource "aws_api_gateway_integration" "lambda_integration_delete" {
  rest_api_id             = aws_api_gateway_rest_api.lambda_api.id
  resource_id             = aws_api_gateway_resource.lambda_resource_id.id
  http_method             = aws_api_gateway_method.lambda_method_delete.http_method
  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.todo_lambda.invoke_arn
}

# API Gateway integration for PATCH
resource "aws_api_gateway_integration" "lambda_integration_patch" {
  rest_api_id             = aws_api_gateway_rest_api.lambda_api.id
  resource_id             = aws_api_gateway_resource.lambda_resource_id.id
  http_method             = aws_api_gateway_method.lambda_method_patch.http_method
  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.todo_lambda.invoke_arn
}

# Lambda function permissions for GET, POST, PATCH, DELETE methods
resource "aws_lambda_permission" "api_gateway_invoke_get" {
  statement_id  = "AllowAPIGatewayInvokeGET"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.todo_lambda.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_rest_api.lambda_api.execution_arn}/*/${aws_api_gateway_method.lambda_method_get.http_method}${aws_api_gateway_resource.lambda_resource.path}"
}

resource "aws_lambda_permission" "api_gateway_invoke_post" {
  statement_id  = "AllowAPIGatewayInvokePOST"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.todo_lambda.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_rest_api.lambda_api.execution_arn}/*/${aws_api_gateway_method.lambda_method_post.http_method}${aws_api_gateway_resource.lambda_resource.path}"
}

resource "aws_lambda_permission" "api_gateway_invoke_patch" {
  statement_id  = "AllowAPIGatewayInvokePATCH"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.todo_lambda.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_rest_api.lambda_api.execution_arn}/*/${aws_api_gateway_method.lambda_method_patch.http_method}${aws_api_gateway_resource.lambda_resource.path}/{id}"
}

resource "aws_lambda_permission" "api_gateway_invoke_delete" {
  statement_id  = "AllowAPIGatewayInvokeDELETE"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.todo_lambda.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_rest_api.lambda_api.execution_arn}/*/${aws_api_gateway_method.lambda_method_delete.http_method}${aws_api_gateway_resource.lambda_resource.path}/{id}"
}

# API Gateway deployment
resource "aws_api_gateway_deployment" "lambda_deployment" {
  depends_on = [
    aws_api_gateway_integration.lambda_integration_get,
    aws_api_gateway_integration.lambda_integration_post,
    aws_api_gateway_integration.lambda_integration_patch,
    aws_api_gateway_integration.lambda_integration_delete
  ]

  rest_api_id = aws_api_gateway_rest_api.lambda_api.id
  stage_name  = "dev"
}

# Output API Gateway invoke URL
output "api_gateway_invoke_url" {
  value = "${aws_api_gateway_deployment.lambda_deployment.invoke_url}${aws_api_gateway_resource.lambda_resource.path}"
}
